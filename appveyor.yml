# We have to disable the `build` command explicitly otherwise the default is
# MSBuild which assumes this is a Visual Studio project. Python source/binary
# wheels a Windows .exe are generated below in `install`.
build: false


environment:
  matrix:
    - PYTHON: "C:\\Python38-x64"
  ai_license_secret:
    secure: lulTujjpNX3A1RKIvj834/Czn6etzevma6oqlA5Xia5tgrg75SPXcs1lPNlu5YPU
  ai_license_salt:
    secure: kMv/7J3wqaRGUJYwnfaY6edw0VW39uX7oM9Od9PQ2wwlCmTZcwAh4kEUxhB5u91QbXmp4McMuwcXAO4UdVoSGg==


# SignPath Config for Code Signing
deploy:
- provider: Webhook
  url: https://app.signpath.io/API/v1/f2efa44c-5b5c-45f2-b44f-8f9dde708313/Integrations/AppVeyor?ProjectSlug=DVR-Scan&SigningPolicySlug=release-signing
  authorization:
     secure: NPMogMcEb5S/ASMEiL275H79D+Pj9cgUqx8kjTPGXtF9drZW41nljczuhF1XvcxFgI0q9TA1BUX9YuCoTQ3mEQ==


install:
  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  - echo * *                           INITIALIZING BUILD                            * *
  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  # Must checkout *exact* commit to meet SignPath's origin verification requirements:
  # https://about.signpath.io/documentation/build-system-integration#ci-integrations-with-origin-verification
  - git checkout d09eec6f262cef0bc1daff51dd7dce55151ce341

  # Restore Windows build dependencies from the branch we just switched from.
  - git checkout refs/remotes/origin/build-windows -- dist/


  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  - echo * *                      SETTING UP PYTHON ENVIRONMENT                      * *
  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  - 'SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%'
  - python --version
  - python -m pip install --upgrade pip
  - "python -m pip install opencv-python opencv-contrib-python --only-binary :all:"
  - python -m pip install -r dist/requirements_windows.txt


  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  - echo * *                          BUILDING WINDOWS EXE                           * *
  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  - pyinstaller dist/dvr-scan.spec
  - python dist/cleanup_dependencies.py
  - 7z e -odist/dvr-scan dist/windows/ffmpeg.zip
  - cd dist/dvr-scan
  - 7z a ../dvr-scan-win64.zip *
  - cd ../..

# TODO: Put required CUDA DLLs on the server before building, otherwise the resulting exe
# is not runnable.
#
#  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#  - echo * *                       BUILDING WINDOWS EXE (CUDA)                       * *
#  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
#
#  - "python -m pip uninstall -y opencv-python opencv-contrib-python"
#  - '7z e -o%PYTHON%/Lib/site-packages dist/windows/cv2.cp38-win_amd64.zip'
#  - mkdir dist-cuda
#  - pyinstaller dist/dvr-scan.spec --distpath dist-cuda
#  - 'del %PYTHON%\\Lib\\site-packages\\cv2.cp38-win_amd64.pyd'
#  - python dist/cleanup_dependencies.py
#  - 7z e -odist-cuda/dvr-scan dist/windows/ffmpeg.zip
#  - cd dist-cuda/dvr-scan
#  - 7z a ../dvr-scan-win64-cuda.zip *
#  - cd ../..
#  - "python -m pip install opencv-python opencv-contrib-python --only-binary :all:"
  #

  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  - echo * *                         BUILDING MSI INSTALLER                          * *
  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  # Download, install, and register AdvancedInstaller
  - cd dist/installer
  - ps: iex ((New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/appveyor/secure-file/master/install.ps1'))
  - appveyor-tools\secure-file -decrypt license65.dat.enc -secret %ai_license_secret% -salt %ai_license_salt%
  - appveyor DownloadFile https://www.advancedinstaller.com/downloads/advinst.msi
  - msiexec /i advinst.msi /qn
  - 'SET PATH=%PATH%;C:\\Program Files (x86)\\Caphyon\\Advanced Installer 19.7\\bin\\x86'
  # License path must be absolute
  - AdvancedInstaller.com /RegisterOffline "%cd%\license65.dat"
  # Create MSI installer
  - AdvancedInstaller.com /build DVR-Scan.aip
  - cd ../..


  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  - echo * *                        PACKAGING BUILD ARTIFACTS                        * *
  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

  # Zip all resources together for code signing
  - cd dist
  # TODO: Add installer and CUDA build .exe.
  - move installer\DVR-Scan-*.msi .
  - cp dvr-scan\dvr-scan.exe .
  - 7z a dvr-scan-signed.zip dvr-scan.exe DVR-Scan-*.msi
  - cd ..

test_script:
  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  - echo * *                              TESTING BUILD                              * *
  - echo * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
  # Run unit tests
  - pytest
  # Test Windows build
  - cd dist/dvr-scan
  - dvr-scan.exe -v
  - dvr-scan.exe -i ../../tests/resources/simple_movement.mp4 -so -df 4 -et 100
  # TODO: To test the CUDA build, we need the CUDA DLLs on the server. This probably requires
  # using Git LFS as they are relatively large.


artifacts:
  # Portable ZIP
  - path: dist/dvr-scan-win64.zip
    name: DVR-Scan-win64_portable
#  # Portable ZIP (CUDA)
#  - path: dist-cuda/dvr-scan-win64-cuda.zip
#    name: DVR-Scan-win64_cuda
  # Bundle for Code Signing (TODO: Installer + CUDA version)
  - path: dist/dvr-scan-signed.zip
    name: DVR-Scan-win64_installer
